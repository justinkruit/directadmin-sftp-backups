1,41c1,86
< #!/usr/local/bin/php
< <?php
< 
< $use_pasv = true;
< $url_curl = false;
< 
< $ftp_server = getenv("ftp_ip");
< $ftp_user_name = getenv("ftp_username");
< $ftp_user_pass = getenv("ftp_password");
< $ftp_remote_path = getenv("ftp_path");
< $ftp_port = getenv("ftp_port");
< $ftp_remote_file = getenv("ftp_remote_file");
< $ftp_local_file = getenv("ftp_local_file");
< 
< $ftp_secure = getenv("ftp_secure");
< $ftps = false;
< if ($ftp_secure == "ftps")
< 	$ftps = true;
< 
< if ($url_curl)
< {
< 	$exit_code = download_with_curl();
< 	exit($exit_code);
< }
< 
< if ($ftps && !function_exists("ftp_ssl_connect"))
< {
< 	echo "ftp_ssl_connect function does not exist. Dropping down to insecure ftp.\n";
< 	$ftps = false;
< }
< 
< if ($ftps)
< 	$conn_id = ftp_ssl_connect($ftp_server, $ftp_port);
< else
< 	$conn_id = ftp_connect($ftp_server, $ftp_port);
< 
< if (!$conn_id)
< {
< 	echo "Unable to connect to ${ftp_server}:${ftp_port}\n";
< 	exit(1);
< }
---
> #!/bin/sh
> # ===========================================================
> # Original script was written by Directadmin
> # ===========================================================
> # Patched:
> #  sFTP/SSH support added
> #  By Alex Grebenschikov, Poralix, www.poralix.com
> #  Last modified: Wed Dec 11 20:30:29 +07 2019
> #  Version: 1.2.poralix.2 $ Wed Dec 11 20:30:29 +07 2019
> #           1.2.poralix   $ Thu Sep 12 23:55:18 +07 2019
> # ===========================================================
> 
> TMPDIR="/home/tmp";
> PORT="${ftp_port}";
> REMOTE_FILE="${ftp_remote_file}";
> LOCAL_FILE="${ftp_local_file}";
> LOCAL_PATH=`dirname ${LOCAL_FILE}`;
> 
> RANDNUM=`/usr/local/bin/php -r 'echo rand(0,10000);'`;
> #we need some level of uniqueness, this is an unlikely fallback.
> if [ "${RANDNUM}" = "" ]; then
> 	RANDNUM="${ftp_ip}";
> fi
> 
> CFG="${TMPDIR}/${RANDNUM}.cfg";
> rm -f "${CFG}";
> touch "${CFG}";
> chmod 600 "${CFG}";
> 
> DUMP="${TMPDIR}/${RANDNUM}.dump";
> rm -f "${DUMP}";
> touch "${DUMP}";
> chmod 600 "${DUMP}";
> 
> # Poralix
> SSH_SFTP="/usr/bin/sftp";
> [ -x "${SSH_SFTP}" ] || SSH_SFTP="/bin/sftp";
> SSHPASS="/usr/bin/sshpass";
> [ -x "${SSHPASS}" ] || SSHPASS="/bin/sshpass";
> USE_SSH=0;
> SSH_PORTS="22 2200 22022";
> SSH_KEY="";
> for SSH_PORT in ${SSH_PORTS};
> do
> 	# Working with SSH?
> 	if [ -n "${PORT}" ] && [ "${PORT}" = "${SSH_PORT}" ]; then
> 		USE_SSH=1;
> 		break;
> 	fi;
> done;
> 
> download_file_ssh()
> {
> 	# All the binaries installed?
> 	if [ ! -x "${SSH_SFTP}" ] || [ ! -x "${SSHPASS}" ]; then
> 		echo "";
> 		echo "*** Backup not uploaded ***";
> 		echo "Can not find SFTP and/or SSHPASS binaries";
> 		echo "";
> 		echo "Please install sftp and/or sshpass using OS repository";
> 		echo "";
> 		exit 10;
> 	fi;
> 
> 	# Use SSH KEY?
> 	if [ -n "${ftp_password}" ] && [ -f "${ftp_password}" ]; then
> 		ssh-keygen -P '' -e -y -f "${ftp_password}" >/dev/null 2>&1;
> 		if [ "$?" = "0" ]; then
> 			SSH_KEY="${ftp_password}";
> 		fi;
> 	fi;
> 
> 	TMP_BATCH_FILE=$(mktemp);
> 	#echo "progress" >> ${TMP_BATCH_FILE};
> 	echo "cd ${ftp_path}" >> ${TMP_BATCH_FILE};
> 	echo "lcd ${LOCAL_PATH}" >> ${TMP_BATCH_FILE};
> 	echo "get ${REMOTE_FILE}" >> ${TMP_BATCH_FILE};
> 	echo "quit" >> ${TMP_BATCH_FILE};
> 
> 	if [ -z "${SSH_KEY}" ]; then
> 		echo "${ftp_password}" >> ${CFG};
> 		${SSHPASS} -f${CFG} ${SSH_SFTP} -C -oBatchMode=no -b ${TMP_BATCH_FILE} -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -oPort=${PORT} ${ftp_username}@${ftp_ip} > ${DUMP} 2>&1;
> 	else
> 		${SSH_SFTP} -C -oBatchMode=no -b ${TMP_BATCH_FILE} -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -oPort=${PORT} -oIdentityFile=${SSH_KEY} ${ftp_username}@${ftp_ip} > ${DUMP} 2>&1;
> 	fi;
> 	RET=$?;
43c88
< $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);
---
> 	[ -f "${TMP_BATCH_FILE}" ] && rm -f ${TMP_BATCH_FILE};
45,49c90,93
< if (!$login_result)
< {
< 	echo "Invalid login/password for $ftp_user_name on $ftp_server\n";
< 	ftp_close($conn_id);
< 	exit(2);
---
> 	if [ "${RET}" -ne 0 ]; then
> 		echo "[download] sftp return code: $RET";
> 		cat ${DUMP};
> 	fi
50a95
> # Poralix
52,59c97,98
< ftp_pasv($conn_id, $use_pasv);
< 
< if (!ftp_chdir($conn_id, $ftp_remote_path))
< {
< 	echo "Invalid remote path '$ftp_remote_path'\n";
< 	ftp_close($conn_id);
< 	exit(3);
< }
---
> #######################################################
> # Start
61,65c100,101
< if (ftp_get($conn_id, $ftp_local_file, $ftp_remote_file, FTP_BINARY))
< {
< 	ftp_close($conn_id);
< 	exit(0);
< }
---
> if [ "${USE_SSH}" = "1" ]; then
> 	download_file_ssh;
67,84c103,104
< {
< 	$use_pasv = false;
< 
< 	ftp_pasv($conn_id, $use_pasv);
< 
< 	if (ftp_get($conn_id, $ftp_local_file, $ftp_remote_file, FTP_BINARY))
< 	{
< 		ftp_close($conn_id);
< 			exit(0);
< 	}
< 	else
< 	{
< 		echo "Error while downloading $ftp_remote_file\n";
< 		ftp_close($conn_id);
< 		exit(4);
< 	}
< }
< 
---
> 	/usr/local/directadmin/scripts/ftp_download.php;
> fi;
85a106,107
> rm -f ${CFG};
> rm -f ${DUMP};
87,142c109
< function download_with_curl()
< {
< 	global $use_pasv, $ftp_server, $ftp_user_name, $ftp_user_pass, $ftp_remote_path, $ftp_port, $ftp_remote_file, $ftp_local_file, $ftp_secure, $ftps;
< 
< 	$ftp_url = "ftp://".$ftp_server.":".$ftp_remote_path."/".$ftp_remote_file;
< 	$ch = curl_init();
< 
< 	if (!$ch)
< 	{
< 		echo "Could not intialize curl\n";
< 		return 5;
< 	}
< 
< 	curl_setopt($ch, CURLOPT_URL,				$ftp_url);
< 	curl_setopt($ch, CURLOPT_USERPWD,			$ftp_user_name.':'.$ftp_user_pass);
< 	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,	false);
< 	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,	false);
< 	curl_setopt($ch, CURLOPT_FTP_SSL,			CURLFTPSSL_ALL);
< 	curl_setopt($ch, CURLOPT_FTPSSLAUTH,		CURLFTPAUTH_TLS);
< 	//curl_setopt($ch, CURLOPT_PROTOCOLS,		CURLPROTO_FTPS);
< 	curl_setopt($ch, CURLOPT_PORT,				$ftp_port);
< 	curl_setopt($ch, CURLOPT_TIMEOUT,			15);
< 
< 	//CURLOPT_FTP_FILEMETHOD?
< 
< 	if (!$use_pasv)
< 		curl_setopt($ch, CURLOPT_FTPPORT, '-');
< 
< 	$fp = fopen($ftp_local_file, 'w');
< 	if (!$fp)
< 	{
< 		echo "Unable to open $ftp_local_file for writing\n";
< 		return 6;
< 	}
< 
< 	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
< 	curl_setopt($ch, CURLOPT_FILE, $fp);
< 
< 	$result = curl_exec($ch);
< 
< 	$exec_code = 0;
< 	if ($result === false)
< 	{
< 		echo "curl_exec error: ".curl_error($ch)."\n";
< 		$exec_code = 7;
< 	}
< 	else
< 	if(strlen($result) && $result!="1")
< 		echo $result."\n";
< 
< 	fclose($fp);
< 
< 	return $exec_code;
< }
< 
< ?>
---
> exit ${RET}
